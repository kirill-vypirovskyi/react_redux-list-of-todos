{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","functions/filterTodos.ts","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","defaultState","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","length","className","map","id","completed","title","onClick","actionsCurrTodo","setCurrentTodo","classNames","TodoFilter","handleQuery","newQuery","actionsFilter","onSubmit","event","preventDefault","onChange","newStatus","target","value","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","Loader","TodoModal","useState","isLoaded","setLoaded","user","setUser","useEffect","getUserFromServer","a","userFromServer","href","email","name","filterTodos","filteredTodos","lowerCasedQuery","toLowerCase","includes","App","getTodosFromServer","todosFromServer","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"oOAoBaA,EANG,SAACC,GAAD,MAAgC,CAC9CC,KAAM,kBACNC,QAASF,IAIED,EARM,iBAAyB,CAAEE,KAAM,uBA6BrCE,EAhBY,WAGd,IAFXC,EAEU,uDAFK,KACfC,EACU,uCACV,OAAQA,EAAOJ,MACb,IAAK,kBACH,OAAOI,EAAOH,QAEhB,IAAK,qBACH,OAAO,KAET,QACE,OAAOE,I,OCfAL,EAVO,SAACO,GAAD,MAAuC,CACzDL,KAAM,eACNC,QAASI,IAQEP,EALQ,SAACQ,GAAD,MAAyC,CAC5DN,KAAM,gBACNC,QAASK,IAULC,EAAsB,CAC1BF,MAAO,GACPC,OAAQ,OAyBKE,EApBO,WAGhB,IAFJL,EAEG,uDAFYI,EACfH,EACG,uCACH,OAAQA,EAAOJ,MACb,IAAK,eACH,OAAO,2BACFG,GADL,IAEEE,MAAOD,EAAOH,UAElB,IAAK,gBACH,OAAO,2BACFE,GADL,IAEEG,OAAQF,EAAOH,UAEnB,QACE,OAAOE,ICxCAL,EALI,SAACW,GAAD,MAAoC,CACnDT,KAAM,YACNC,QAASQ,IAoBIC,EAZM,WAGP,IAFZP,EAEW,uDAFI,GACfC,EACW,uCACX,MACO,cADCA,EAAOJ,KAEJI,EAAOH,QAEPE,GCjBPQ,EAAcC,0BAAgB,CAClCC,YAAaX,EACbY,OAAQN,EACRC,MAAOC,IAIIK,EAAQC,sBACnBL,EACAM,8BACEC,0BAAgBC,O,qECfPC,EAAoCC,IACpCC,EAAkDC,I,OCMlDC,EAAsB,SAAC,GAAe,IAAbf,EAAY,EAAZA,MAC9BgB,EAAWL,IACXP,EAAcS,GAAe,SAAAnB,GAAK,OAAIA,EAAMU,eAMlD,OACE,mCACoB,IAAjBJ,EAAMiB,OAEH,mBAAGC,UAAU,0BAAb,iEAIA,wBAAOA,UAAU,+BAAjB,UACE,gCACE,+BACE,mCAEA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAIjB,uCACA,wCAIJ,gCACGlB,EAAMmB,KAAI,SAAA7B,GACT,IACE8B,EAGE9B,EAHF8B,GACAC,EAEE/B,EAFF+B,UACAC,EACEhC,EADFgC,MAGF,OACE,qBAAI,UAAQ,OAAZ,UACE,oBAAIJ,UAAU,eAAd,SAA8BE,IAC9B,oBAAIF,UAAU,eAAd,SACGG,GACC,sBAAMH,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAKnB,oBAAIA,UAAU,2BAAd,SACE,mBACEA,UAAWG,EACP,mBACA,kBAHN,SAKGC,MAIL,oBAAIJ,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACV3B,KAAK,SACLgC,QAAS,kBA9DR,SAACjC,GACtB0B,EAASQ,EAAwBlC,IA6DEmC,CAAenC,IAJhC,SAME,sBAAM4B,UAAU,OAAhB,SACE,mBACEA,UAAWQ,IACT,MACA,CACE,eAAgBpC,IAASc,EACzB,SAAUd,IAASc,cAjCTgB,cC9C7BO,EAAuB,WAClC,IAAMX,EAAWL,IACjB,EAA0BE,GAAe,SAAAnB,GAAK,OAAIA,EAAMW,UAAhDT,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OAMT+B,EAAc,SAACC,GACnBb,EAASc,EAA0BD,KAGrC,OACE,uBACEX,UAAU,mBACVa,SAAU,SAAAC,GAAK,OAAIA,EAAMC,kBAF3B,UAIE,mBAAGf,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRgB,SAAU,SAACF,GAAD,OAjBEG,EAiBsBH,EAAMI,OAAOC,WAhBvDrB,EAASc,EAA2BK,IADjB,IAACA,GAkBZE,MAAOxC,EAHT,UAKE,wBAAQwC,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,8BAKN,oBAAGnB,UAAU,qDAAb,UACE,uBACE,UAAQ,cACR3B,KAAK,OACL2B,UAAU,QACVoB,YAAY,YACZD,MAAOzC,EACPsC,SAAU,SAACF,GAAD,OAAWJ,EAAYI,EAAMI,OAAOC,UAEhD,sBAAMnB,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGf,sBAAMA,UAAU,gBAAgBqB,MAAO,CAAEC,cAAe,OAAxD,SACG5C,GAEC,wBACE,UAAQ,oBACRL,KAAK,SACL2B,UAAU,SACVK,QAAS,kBAAMK,EAAY,gBC5CzC,SAASa,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,IAEMC,EAAU,SAACC,GAAD,OAAoBZ,EAAG,iBAAiBY,KCpBlDC,G,MAAmB,kBAC9B,qBAAKpC,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCONqC,EAA6B,SAAC,GAAc,IAAZjE,EAAW,EAAXA,KAEzC8B,EAIE9B,EAJF8B,GACAC,EAGE/B,EAHF+B,UACAC,EAEEhC,EAFFgC,MACA+B,EACE/D,EADF+D,OAGF,EAA8BG,oBAAS,GAAvC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAwBF,mBAAsB,MAA9C,mBAAOG,EAAP,KAAaC,EAAb,KAEM5C,EAAWL,IAmBjB,OAdAkD,qBAAU,WACR,IAAMC,EAAiB,uCAAG,4BAAAC,EAAA,+EAEOX,EAAQC,GAFf,OAEhBW,EAFgB,OAItBJ,EAAQI,GAJc,uBAMtBN,GAAU,GANY,uEAAH,qDAUvBI,MACC,IAGD,sBAAK5C,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,sBAEbuC,GAAa,cAAC,EAAD,IAEdE,GACC,sBAAKzC,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,yBAIYE,KAIZ,wBACE7B,KAAK,SACL2B,UAAU,SACV,UAAQ,cACRK,QAvCe,WACzBP,EAASQ,WA0CH,sBAAKN,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,SACGI,IAGH,oBAAGJ,UAAU,QAAQ,UAAQ,aAA7B,UACGG,EACG,wBAAQH,UAAU,mBAAlB,kBACA,wBAAQA,UAAU,kBAAlB,qBAEH,OACD,mBAAG+C,KAAI,iBAAYN,EAAKO,OAAxB,SACGP,EAAKQ,oB,QC7CPC,EA/BK,SAClBpE,EACAK,GAEA,IAAIgE,EAAa,YAAOrE,GAEhBJ,EAAkBS,EAAlBT,MAER,OAF0BS,EAAXR,QAGb,IAAK,SACHwE,EAAgBA,EAAchE,QAAO,SAAAf,GAAI,OAAKA,EAAK+B,aACnD,MACF,IAAK,YACHgD,EAAgBA,EAAchE,QAAO,SAAAf,GAAI,OAAIA,EAAK+B,aAMtD,GAAIzB,EAAO,CACT,IAAM0E,EAAkB1E,EAAM2E,cAE9BF,EAAgBA,EACbhE,QAAO,SAAAf,GAAI,OAAIA,EAAKgC,MAClBiD,cACAC,SAASF,MAGhB,OAAOD,GClBII,EAAgB,WAC3B,MAA8BjB,oBAAS,GAAvC,mBAAOC,EAAP,KAAiBC,EAAjB,KAEM1C,EAAWL,IACXX,EAAQa,GAAe,SAAAnB,GAAK,OAAIA,EAAMM,SACtCK,EAASQ,GAAe,SAAAnB,GAAK,OAAIA,EAAMW,UACvCD,EAAcS,GAAe,SAAAnB,GAAK,OAAIA,EAAMU,eAElDyD,qBAAU,WACR,IAAMa,EAAkB,uCAAG,4BAAAX,EAAA,+EJDDtB,EAAY,UICX,OAEjBkC,EAFiB,OAIvB3D,EAAS4D,EAAsBD,IAJR,uBAMvBjB,GAAU,GANa,uEAAH,qDAUxBgB,MACC,IAEH,IAAML,EAAgBD,EAAYpE,EAAOK,GAEzC,OACE,qCACE,qBAAKa,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,MAGF,qBAAKA,UAAU,QAAf,SACIuC,EAEE,cAAC,EAAD,CAAUzD,MAAOqE,IADjB,cAAC,EAAD,aAOXjE,GACC,cAAC,EAAD,CAAWd,KAAMc,QCjDnByE,EAAO,kBACX,cAAC,IAAD,CAAUvE,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,SAKNwE,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.ab611daa.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype ChangeQueryAction = {\n  type: 'query/CHANGE';\n  payload: string;\n};\n\ntype ChangeStatusAction = {\n  type: 'status/CHANGE';\n  payload: Status;\n};\n\nconst changeQuery = (query: string): ChangeQueryAction => ({\n  type: 'query/CHANGE',\n  payload: query,\n});\n\nconst changeStatus = (status: Status): ChangeStatusAction => ({\n  type: 'status/CHANGE',\n  payload: status,\n});\n\nexport const actions = { changeQuery, changeStatus };\n\ntype State = {\n  query: string;\n  status: Status;\n};\n\nconst defaultState: State = {\n  query: '',\n  status: 'all',\n};\n\ntype Action = ChangeQueryAction | ChangeStatusAction;\n\nconst filterReducer = (\n  state: State = defaultState,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'query/CHANGE':\n      return {\n        ...state,\n        query: action.payload,\n      };\n    case 'status/CHANGE':\n      return {\n        ...state,\n        status: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype State = Todo[];\ntype Action = SetTodosAction;\n\nconst todosReducer = (\n  state: State = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import classNames from 'classnames';\nimport { FC } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as actionsCurrTodo } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: FC<Props> = ({ todos }) => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const setCurrentTodo = (todo: Todo) => {\n    dispatch(actionsCurrTodo.setTodo(todo));\n  };\n\n  return (\n    <>\n      {todos.length === 0\n        ? (\n          <p className=\"notification is-warning\">\n            There are no todos matching current filter criteria\n          </p>\n        ) : (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {todos.map(todo => {\n                const {\n                  id,\n                  completed,\n                  title,\n                } = todo;\n\n                return (\n                  <tr data-cy=\"todo\" key={id}>\n                    <td className=\"is-vcentered\">{id}</td>\n                    <td className=\"is-vcentered\">\n                      {completed && (\n                        <span className=\"icon\" data-cy=\"iconCompleted\">\n                          <i className=\"fas fa-check\" />\n                        </span>\n                      )}\n                    </td>\n\n                    <td className=\"is-vcentered is-expanded\">\n                      <p\n                        className={completed\n                          ? 'has-text-success'\n                          : 'has-text-danger'}\n                      >\n                        {title}\n                      </p>\n                    </td>\n\n                    <td className=\"has-text-right is-vcentered\">\n                      <button\n                        data-cy=\"selectButton\"\n                        className=\"button\"\n                        type=\"button\"\n                        onClick={() => setCurrentTodo(todo)}\n                      >\n                        <span className=\"icon\">\n                          <i\n                            className={classNames(\n                              'far',\n                              {\n                                'fa-eye-slash': todo === currentTodo,\n                                'fa-eye': todo !== currentTodo,\n                              },\n                            )}\n                          />\n                        </span>\n                      </button>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as actionsFilter } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const handleStatus = (newStatus: Status) => {\n    dispatch(actionsFilter.changeStatus(newStatus));\n  };\n\n  const handleQuery = (newQuery: string) => {\n    dispatch(actionsFilter.changeQuery(newQuery));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) => handleStatus(event.target.value as Status)}\n            value={status}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => handleQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n            /* eslint-disable-next-line jsx-a11y/control-has-associated-label */\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => handleQuery('')}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions as actionsCurrTodo } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    completed,\n    title,\n    userId,\n  } = todo;\n\n  const [isLoaded, setLoaded] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n\n  const dispatch = useAppDispatch();\n  const removeSelectedTodo = () => {\n    dispatch(actionsCurrTodo.removeTodo());\n  };\n\n  useEffect(() => {\n    const getUserFromServer = async () => {\n      try {\n        const userFromServer = await getUser(userId);\n\n        setUser(userFromServer);\n      } finally {\n        setLoaded(true);\n      }\n    };\n\n    getUserFromServer();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!isLoaded && (<Loader />)}\n\n      {user && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={removeSelectedTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Status } from '../types/Status';\nimport { Todo } from '../types/Todo';\n\nconst filterTodos = (\n  todos: Todo[],\n  filter: { query: string, status: Status },\n): Todo[] => {\n  let filteredTodos = [...todos];\n\n  const { query, status } = filter;\n\n  switch (status) {\n    case 'active':\n      filteredTodos = filteredTodos.filter(todo => !todo.completed);\n      break;\n    case 'completed':\n      filteredTodos = filteredTodos.filter(todo => todo.completed);\n      break;\n    default:\n      break;\n  }\n\n  if (query) {\n    const lowerCasedQuery = query.toLowerCase();\n\n    filteredTodos = filteredTodos\n      .filter(todo => todo.title\n        .toLowerCase()\n        .includes(lowerCasedQuery));\n  }\n\n  return filteredTodos;\n};\n\nexport default filterTodos;\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\nimport filterTodos from './functions/filterTodos';\n\nexport const App: React.FC = () => {\n  const [isLoaded, setLoaded] = useState(false);\n\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const filter = useAppSelector(state => state.filter);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    const getTodosFromServer = async () => {\n      try {\n        const todosFromServer = await getTodos();\n\n        dispatch(todosActions.setTodos(todosFromServer));\n      } finally {\n        setLoaded(true);\n      }\n    };\n\n    getTodosFromServer();\n  }, []);\n\n  const filteredTodos = filterTodos(todos, filter);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {!isLoaded\n                ? <Loader />\n                : <TodoList todos={filteredTodos} />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal todo={currentTodo} />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}